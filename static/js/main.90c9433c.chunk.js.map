{"version":3,"sources":["components/Editor.js","components/Preview.js","utils/placeholder.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","className","id","value","markdown","onChange","renderer","marked","Renderer","Preview","dangerouslySetInnerHTML","__html","link","href","title","text","setOptions","breaks","gfm","App","handleChange","e","setState","target","state","editorExpand","previewExpand","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAEe,SAASA,EAAOC,GAC7B,OACE,yBAAKC,UAAU,oBACb,0CACA,8BAAUC,GAAG,SAASC,MAAOH,EAAMI,SAAUC,SAAUL,EAAMK,Y,oBCH7DC,EAAW,IAAIC,IAAOC,SAUb,SAASC,EAAQT,GAC9B,OACE,yBAAKE,GAAG,qBACN,2CACA,yBACEA,GAAG,UACHQ,wBAAyB,CACvBC,OAAQJ,IAAOP,EAAMI,SAAU,CAAEE,SAAUA,QAhBrDA,EAASM,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAAS,QAEvDR,IAAOS,WAAW,CAChBV,WACAW,QAAQ,EACRC,KAAK,ICVP,IC8CeC,E,kDArCb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAQRoB,aAAe,SAACC,GACd,EAAKC,SAAS,CAAElB,SAAUiB,EAAEE,OAAOpB,SARnC,EAAKqB,MAAQ,CACXpB,SDZW,83DCaXqB,cAAc,EACdC,eAAe,GALA,E,qDAaT,IACAtB,EAAauB,KAAKH,MAAlBpB,SAER,OACE,yBAAKH,UAAU,WACb,yBAAKA,UAAU,WACb,2DACA,uBAAGA,UAAU,eAAb,8FAE4B,wCAF5B,0CAIE,0CAJF,UAQF,yBAAKA,UAAU,QACb,kBAACF,EAAD,CAAQK,SAAUA,EAAUC,SAAUsB,KAAKP,eAC3C,kBAACX,EAAD,CAASL,SAAUA,U,GA/BXwB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90c9433c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Editor(props) {\n  return (\n    <div className=\"editor-container\">\n      <header>Editor</header>\n      <textarea id=\"editor\" value={props.markdown} onChange={props.onChange} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport marked from \"marked\";\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + \"</a>\";\n};\nmarked.setOptions({\n  renderer,\n  breaks: true,\n  gfm: true,\n});\n\nexport default function Preview(props) {\n  return (\n    <div id=\"preview-container\">\n      <header>Preview</header>\n      <div\n        id=\"preview\"\n        dangerouslySetInnerHTML={{\n          __html: marked(props.markdown, { renderer: renderer }),\n        }}\n      />\n    </div>\n  );\n}\n","const placeholder = `\n## Headers\n---\n\n# React Markdown Previewer!\n## This is a sub-heading...(h2)\n### And I'm a third tier heading:\n###### You can even do an \\`<h6>\\` heading\n\nThree or more...\n\n---\nHyphens\n***\nAsterisks\n___\nUnderscores\n\n...for line breaks\n\n## Code\n---\nHeres some code, \\`<div></div>\\`,  between 2 backticks.\n\n\\`\\`\\`\n// three backticks for multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\n## Emphasis\n---\n  \nYou can also make text **bold**... \nOr _italic_.\nOr... wait for it... **_both!_**\nAnd ~~cross stuff out~~.\n\n## Links, Blockquotes, Tables\n---\n\nThere's also [links](https://www.freecodecamp.com)\n> Block Quotes!\n\n> Coffee. The finest organic suspension ever devised... I beat the Borg with it.\n> - Captain Janeway\n\nAnd if you want to make tables:\n\n| Tables    | Are          | Cool   |\n----------- |:------------:| ------:| \n| Your content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it. |\n\n\n## Lists\n---\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n  1. Ordered sub-list\n4. And another item.\n        \n   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n        \n   To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n   Note that this line is separate, but within the same paragraph.\n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n        \n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n\n## Images\n---\n![React Logo w/ Text](https://goo.gl/Umyytc \"React Logo Title Text\")\n`;\n\nexport default placeholder;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Editor from \"./components/Editor\";\nimport Preview from \"./components/Preview\";\n\nimport placeholder from \"./utils/placeholder\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder,\n      editorExpand: false,\n      previewExpand: false,\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ markdown: e.target.value });\n  };\n\n  render() {\n    const { markdown } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"heading\">\n          <h1>A Simple Markdown Previewer</h1>\n          <p className=\"description\">\n            Markdown is an easy-to-read, easy-to-write syntax for formatting\n            plain text. Use it in the <span>Editor</span> box and see the\n            fortmatted text in the\n            <span> Preview</span> box.\n          </p>\n        </div>\n\n        <div className=\"main\">\n          <Editor markdown={markdown} onChange={this.handleChange} />\n          <Preview markdown={markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}